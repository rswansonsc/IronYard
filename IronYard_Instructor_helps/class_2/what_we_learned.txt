# Gets: Receives input from the user. Makes the application wait.
#    Value received: "Hello\n"
# Chomp: Takes off the escape characters. '\n' '\r'
#    Value received: "Hello"

gets.chomp

# Arrays!

# Push: Adds an element to an array
# Pop: Removes an element from an array
# LIFO - Last in first out

array = ["three", "words", "here"]
array.pop
# "here" - ["three", "words"]
array.push("two")
# ["three", "words", "here", "two"]
array.delete_at(1)
# ["three", "here", "two"]
# Arrays can use negative values!

)

# How to display alphabet
a = [*('a'..'z')]
# a = [*"a".."z"]
# ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]
# Join: Makes an array join into a string
puts a.join(',')
# "a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z"

# Reading a dictionary
# array = IO.readlines('dictionary.txt')
# This does the same thing as
# file = File.open("dictionary.txt")
# words = file.readlines

# Ruby uses the "duck" mentatily of doing things
# If it walks like a duck, quacks like a duck, looks like a duck, it's a duck
# a = "asdf"
# a.class
# String
# The above is a shortcut for
# a = String.new("asdf")
# a.class
# String

# Variable types
# @instance_variable
# @@class_variable
# local_variable
# $global_variable - Do not use
# Scope - where the variable exists
#
# def random_function
#   myvariable1 = "asdf"
# end
# myvariable1 - OUT OF SCOPE (undefined method or variable "myvariable1")

# How to find a random number
# How to use that to find a random word in a words array
words_array = ["Asdf", "Hello_world", "Sky"]
# words_array.length will return 3
random_number = Random.rand(words_array.length - 1)
random_words = words_array[random_number]
# Another way
words_array = ["Asdf", "Hello_world", "Sky"]
words_array.sample

# Difference between single and double quotes
# Interpolation
a = 'Hello world\t\s'
b = "Helloworld\t\s\n"
\n\s Escape characters
# Ruby code in strings
c = "Hello world #{2+2}"

# Sublime text hotkeys
command + shift - highlights
command + shift + right - highlights everything to the right
command + / - Comments out an entire line
command + a - highlights the entire file
command + c - copy
command + v - paste
command + x - cut
command + tab - cycles through opened programs
command + shift + tab - cycles through programs backwards
f11 - shows desktop
command + q - quits a program
command + w - closes current window
command + s - saves
command + shift + 4 - Captures a screenshot (click and drag)
command + shift + 3 - Captures a screenshot of current window
2 fingers scroll - scrolls
command + ~ - cycles through the same program
alt + drag - drags into a box
control + c - quits
command + shift + f - find and replace

# Puts and print
# Puts: will add a carriage return before displaying
puts "asdf"
# Print: puts it on the same line
print "asdf"
def method_name
  10.times do
   print "1"
  end
end

# Looping
a = [1,2,3,4,5,6,7,8]
a.each do |number|
	puts number
end

# If checks
variable = 5
if variable  == 10
	puts "hello"
else
	puts "world"
end

puts "Dudeman what's up" if variable == 5
